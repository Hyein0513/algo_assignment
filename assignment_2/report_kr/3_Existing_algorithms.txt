
본 과제에서는 총 4가지 기존 알고리즘을 구현하고 비교하였다. 각각의 알고리즘은 고전적인 이론에 기반하며, TSP 문제 해결에 있어 성능과 시간 복잡도 면에서 상이한 특성을 보인다. 특히 일부는 정답을 보장하는 최적 알고리즘이며, 일부는 근사 해법이다.

---

3.1 MST 기반 2-근사 알고리즘

- 이론적 배경

MST(Minimum Spanning Tree)를 활용한 TSP 근사 알고리즘은 [CLRS (Cormen et al., 2009)]의 35.2절에 기술된 대표적 휴리스틱으로, Christofides 알고리즘의 간략화된 형태이기도 하다. 

- 알고리즘 개요

1. 전체 그래프에 대해 MST를 생성한다.
2. MST를 DFS 순서로 순회하면서 방문 경로를 기록한다.
3. 중복 방문 없이 모든 노드를 순회한 뒤 시작점으로 되돌아간다.

- 시간복잡도

* MST 구성 (Prim): O(n^2)
* DFS 순회: O(n)

- 공간복잡도
O(n)

- 장단점

* 장점: 단순하고 빠르며, 이론적으로 2배 이내의 근사 해 보장
* 단점: 실제 경로의 품질은 DFS 순서에 의존하며, 멀리 떨어진 점을 비효율적으로 연결할 수 있음

- 구현한 의사코드 (Pseudocode)

'''
Input: coord[n] - list of 2D points

1. Initialize:
   - mst_adj[n]: adjacency list for MST
   - key[n] = INF, parent[n] = -1, in_tree[n] = false
   - key[0] = 0

2. Construct MST using Prim's Algorithm:
   For each node i in 0 to n-1:
      - Select u: unvisited node with minimum key
      - Mark in_tree[u] = true
      - If parent[u] != -1:
            - Add edge u <-> parent[u] to mst_adj
      - For each node v not in_tree:
            - If dist(u, v) < key[v]:
                - key[v] = dist(u, v)
                - parent[v] = u

3. Perform DFS from node 0:
   - Traverse mst_adj recursively and build tour

4. Append node 0 at end to complete cycle

Return tour
'''

---

3.2 Held-Karp 알고리즘 (Dynamic Programming)

- 이론적 배경

Held & Karp (1962) [Held and Karp, 1962]는 동적 계획법(DP)을 이용하여 TSP의 최적 해를 계산하는 방식을 제안하였다. 이 방식은 Bellman의 최적 원칙을 비트마스크로 관리하여 경로를 체계적으로 구성한다.

- 알고리즘 개요

1. 각 상태를 (방문한 노드 집합, 현재 노드)로 정의
2. DP 테이블을 통해 최소 비용을 누적 계산
3. 모든 상태를 계산한 뒤, 경로를 역추적하여 최적 경로를 구함

- 시간복잡도
* O(n^2 * 2^n)

- 공간복잡도 
O(n * 2^n)

- 장단점

* 장점: 정확한 최적 해 보장
* 단점: 메모리와 시간 사용량이 지수적 → n > 20에서는 비현실적 자원 사용량

#### 💡 의사코드

'''
Input: coord[n] - list of 2D points

1. Initialize:
   - dp[2^n][n] = INF
   - parent[2^n][n] = -1
   - dp[1 << 0][0] = 0

2. For mask from 1 to (1 << n) - 1:
      For i = 0 to n-1:
         If i not in mask: continue
         For j = 0 to n-1:
            If j == i or j not in mask: continue
            prev_mask = mask ^ (1 << i)
            new_cost = dp[prev_mask][j] + dist(j, i)
            If new_cost < dp[mask][i]:
               dp[mask][i] = new_cost
               parent[mask][i] = j

3. Find minimum path ending at any node k:
   - min_cost = dp[full_mask][k] + dist(k, 0)

4. Reconstruct path from parent table

Return optimal tour
'''

---

3.3 최근접 이웃 (Greedy Nearest Neighbor)

- 이론적 배경

Greedy Nearest Neighbor 알고리즘은 TSP 문제에 대한 가장 단순한 휴리스틱 중 하나로, [Matai et al., 2010] 등의 TSP 알고리즘 개요 논문에서도 소개된다.

- 알고리즘 개요

1. 시작 노드에서 출발
2. 현재 위치에서 가장 가까운 미방문 노드를 탐색하여 이동
3. 모든 노드를 방문할 때까지 반복

- 시간복잡도
* O(n^2)

- 공간복잡도
O(n)

- 장단점

* 장점: 매우 빠르고 구현이 간단
* 단점: 국소 최적에 빠져 경로 품질이 불안정하며, path 구성 후반부에서 초반 흐름에서 놓치고 넘어갔던 node로 인한 구조적 흐름 붕괴(zigzag) 발생 빈번

- 의사코드

'''
Input: coord[n] - list of 2D points

1. Initialize:
   - visited[n] = false
   - tour = [0]
   - visited[0] = true
   - cur = 0

2. For step in 1 to n-1:
   - min_dist = INF
   - For i in 0 to n-1:
        If visited[i]: continue
        If dist(cur, i) < min_dist:
            min_dist = dist(cur, i)
            next = i
   - cur = next
   - visited[cur] = true
   - tour.append(cur)

3. tour.append(0) to complete cycle

Return tour
'''

---

3.4 Insertion Heuristic

- 이론적 배경

Insertion heuristic은 초기 노드로부터 시작하여, 남은 노드를 하나씩 현재 경로에 삽입하면서 경로를 확장하는 방식이다. 다양한 변형이 존재하며, 본 구현은 [Matai et al., 2010]에서 소개된 가장 기본적인 "Nearest Insertion" 기법을 따른다.

- 알고리즘 개요

1. 시작 노드와 가장 가까운 노드로 초기 경로 구성
2. 남은 노드 중 현재 경로에 가장 가까운 노드를 선택
3. 경로 내에서 그 노드를 삽입할 위치 중 거리 증가량이 최소인 곳에 삽입
4. 반복

- 시간복잡도
* O(n^2)

- 공간복잡도
O(n)

- 장단점

* 장점: Greedy보다 경로 품질 우수, 구조적 안정성
* 단점: 느리고, 삽입 위치 탐색 비용 존재. 초기 선택에 민감

- 의사코드

'''
Input: coord[n] - list of 2D points

1. Initialize:
   - visited[n] = false
   - Find closest node to 0 → closest
   - tour = [0, closest, 0]
   - Mark 0, closest as visited

2. While tour.size() < n + 1:
   - For each unvisited node i:
        Find min dist(i, tour[j]) → pick next node
   - For all edges (a, b) in tour:
        compute increase = dist(a, next) + dist(next, b) - dist(a, b)
   - Insert next at position that minimizes increase
   - Mark next as visited

Return tour
'''

---

## 참고문헌

* Held and Karp, 1962: https://epubs.siam.org/doi/abs/10.1137/0110015
* Cormen et al., 2009: https://mitpress.mit.edu/9780262033848/introduction-to-algorithms/
* Matai et al., 2010: https://www.intechopen.com/chapters/11724
