4.1 설계 동기 및 목적
본 연구는 2차원 유클리디안 공간에서 정의되는 외판원 문제(2D Euclidean TSP)에 대해, 기존 Greedy 기반 휴리스틱의 구조적 한계를 개선하면서도 빠른 실행 속도를 유지하는 근사 알고리즘을 설계하는 데 목적을 둔다. 특히, 다음과 같은 실용적 응용 시나리오를 염두에 두었다:

드론 또는 배송 차량이 수천~수만 개의 배송 지점을 빠르게 경유해야 하는 상황

경로 상의 급격한 방향 전환은 연료나 에너지 낭비로 직결되는 시스템

외곽 지점이나 놓친 중간 경유지를 후반에 수습하느라 전체 이동 거리가 증가하는 패턴

기존의 Greedy (Nearest Neighbor) 방식은 실행 속도 면에서는 우수하나, 아래와 같은 구조적 단점을 지닌다:

지역 탐색 편향 (local bias): 가까운 점만 선택한 결과, 외곽 지점이 후반까지 처리되지 않아 전체 경로가 지그재그 형태로 왜곡됨

방향 일관성 미반영: 이동 방향의 급격한 전환이 빈번하게 발생하며, 이는 실제 이동 비용(회전, 연료 소비 등)과 무관하게 간주됨

전역 거리 탐색 비용: 모든 노드와의 거리를 매번 계산함에 따라 
𝑂
(
𝑛
2
)
O(n 
2
 )의 시간복잡도가 발생

이러한 한계를 보완하기 위해, 본 논문에서는 다음의 세 가지 설계 원칙을 중심으로 알고리즘을 구성하였다:

1. 경로 구조 개선:

이전 이동 방향과의 각도 차이를 고려한 **방향성 패널티(angle-aware penalty)**를 도입하여 급격한 회전을 억제하고, 연속적인 경로 흐름을 유도

투어 초반에 외곽 점들이 누락되어 후반에 긴 이동이 발생하는 현상을 방지하기 위해, Convex Hull 기반 보정 기법을 적용하여 외곽 노드에 낮은 패널티를 부여

2. 실행 속도 향상:

전체 거리 비교 대신, Uniform Grid 기반 K-nearest 후보 탐색으로 탐색 범위를 제한하고 연산량을 감소시킴

지역 밀도에 따라 K값을 적응적으로 조절하는 Adaptive K 전략을 통해 과도한 탐색 비용을 회피

3. 실용적 확장 가능성 확보:

방향성 패널티 함수에 여러 버전을 도입하여 다양한 도메인 조건에 따른 경로 성향 조절이 가능하도록 설계

Multi-start 및 간단한 2-opt 후처리로 탐색 다양성과 지역 최적 해소 효과를 부여

결과적으로, 본 알고리즘은 Greedy에 근거한 단순하고 빠른 구조를 유지하면서도, 경로의 전역적 품질을 보다 안정적으로 제어할 수 있도록 구성되었다. 실험적으로도 기존 Greedy 대비 유사하거나 더 우수한 경로 길이를 훨씬 빠른 시간 안에 산출할 수 있음을 확인하였다.





=====================================

4.0 설계 동기 및 목적
기존의 Greedy 계열 알고리즘은 계산 속도는 빠르지만, 지역 최적에 빠지는 경향이 강하고 전체 경로 품질이 불안정하다는 단점이 있다. 특히 후반부 경로가 불규칙해지고, 지그재그 경로가 발생하는 문제는 외판원 문제의 실용적 응용에서 큰 제약이 된다.

본 알고리즘은 다음과 같은 문제 의식을 바탕으로 설계되었다:

탐욕 알고리즘의 지역 최적성 한계 극복
→ 방향성 유사도 기반의 패널티를 도입하여 경로의 급격한 방향 전환을 억제하고, 더 자연스럽고 연속적인 경로를 유도한다.

후보 노드의 탐색 범위 최적화
→ 전체 탐색이 아니라 격자 기반의 밀도 정보를 활용해 계산량을 줄이고, 밀도가 낮은 지역에서는 더 넓게 탐색할 수 있도록 동적으로 조절한다.

외곽 노드의 과소평가 문제 해결
→ Convex Hull을 통해 외곽 노드를 식별하고, 이들에 대한 선택 확률을 보정함으로써 경로 왜곡을 방지한다.

초기 조건 민감도 완화
→ 경로 구성을 여러 회전 좌표계에서 반복(Multi-start)하여, 시작점이나 방향에 따라 결과가 크게 달라지는 문제를 완화하고 전역 최적에 가까운 경로를 도출한다.

이러한 구성은 경로 품질을 최대한 유지하면서도 계산 효율성을 해치지 않는 범위 내에서 성능을 향상시키는 것을 목표로 하며, 특히 대규모 문제에서 실용적인 성능을 보여줄 수 있도록 설계되었다.


완벽해! 지금 너가 구현한 내용은 **논문에서 "제안한 알고리즘(Proposed Algorithm)" 섹션**의 핵심으로 들어갈 수 있고, 매우 정교하고 잘 설계된 구조야. 이를 기반으로 해서 논문 스타일에 맞게 정리된 **4. 제안 알고리즘** 항목을 아래와 같이 써줄게:

---

### 4. 제안 알고리즘

본 과제에서는 기존 탐욕 기반 TSP 휴리스틱의 단점을 보완하기 위해, 여러 가지 보정 기법을 결합한 **멀티패스 기반 적응형 Greedy 알고리즘**을 제안한다. 구현된 최종 함수는 `solve_hhi_greedy_2opt_adapK_hull_multi`이며, 다음과 같은 특징을 갖는다:

---

#### 4.1 알고리즘 설계 개요

제안된 알고리즘은 다음의 네 가지 핵심 전략을 결합하여 구성된다.

1. **방향성 패널티(angle-aware penalty)**

   * 이전 이동 방향과 후보 노드까지의 방향 벡터 사이의 유사도를 기반으로, 급격한 회전을 유도하는 노드에 가중 페널티를 부여한다.
   * 이를 통해 지그재그 형태의 비효율적인 경로를 억제하고, 더 매끄러운 경로를 유도한다.

2. **적응형 후보 선택(adaptive candidate selection)**

   * 공간을 정규 격자(grid)로 분할한 뒤, 현재 위치한 셀의 밀도에 따라 후보 노드 수(K)를 조절한다.
   * 밀도가 높을수록 후보 수를 줄여 계산량을 줄이고, 밀도가 낮을수록 더 넓은 탐색이 가능하도록 한다.
   * 특히, Convex Hull에 포함된 외곽 노드는 밀도가 낮고 경계에 위치하는 경우가 많으므로 항상 후보 수를 최대값으로 설정한다.

3. **Convex Hull 기반 패널티 보정**

   * 전체 점 집합에 대해 Convex Hull을 계산하고, 외곽에 위치한 점은 경로에서 필요 이상으로 멀어지는 것을 방지하기 위해 \*\*패널티를 경감(0.25\~0.3배)\*\*한다.
   * 이는 외곽 점들의 과도한 회피를 막고 경로가 비정상적으로 수축되는 현상을 방지한다.

4. **멀티패스 탐색(multi-start rotation strategy)**

   * 동일한 알고리즘을 회전된 좌표계에서 여러 번 실행한 후, 가장 짧은 경로를 선택하는 방식으로 지역 최적 해에 갇힐 위험을 줄인다.
   * 360도를 8등분하여 8개의 회전 각도에 대해 알고리즘을 반복 수행하며, 가장 짧은 경로를 결과로 선택한다.

---

#### 4.2 알고리즘 흐름 요약

1. 좌표계 회전을 8회 시도하며, 각 회전에 대해 다음 단계 수행
2. Grid 기반 K-nearest 후보 탐색 (밀도 기반 적응)
3. 방향 유사도 기반 패널티 적용 및 최적 후보 선택
4. Convex Hull 점일 경우 패널티 조정
5. 1-sweep 2-opt를 통해 국소적인 경로 개선
6. 8회 중 최단 경로 선택

---

#### 4.3 시간 및 공간 복잡도 분석

* **후보 노드 탐색(Grid 기반 kNN):** 평균 \$O(K)\$, 최악 \$O(n)\$
* **경로 구성:** \$O(nK)\$
* **2-opt (1 sweep 제한):** \$O(n^2)\$
* **멀티 스타트 (8회 반복):** 위 전체를 8배 수행 → 최종 시간 복잡도는 \$O(n^2)\$ 수준에서 제한됨
* **공간 복잡도:** \$O(n)\$ (grid, 상태 배열 등 포함)

---

#### 4.4 구현 특징 및 확장성

* 2-opt는 1회 반복으로 제한되어 있어 실용적인 실행 시간 유지
* 각 요소가 독립적으로 구성되어 있어 구성 요소별 효과를 개별 실험 가능
* 전체 구현은 순수 C++로 작성되어, 외부 라이브러리 없이 재현 가능





