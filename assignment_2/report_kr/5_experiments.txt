5. 실험 (Experiments)
5.1 실험 목적
본 실험은 다음 세 가지 질문에 대한 해답을 도출하는 것을 목표로 한다:

1. 제안한 알고리즘이 기존 휴리스틱(Greedy, Insertion, MST) 및 최적화 기반 해법(Held-Karp)에 비해, 실행 시간과 경로 품질 측면에서 실용적인 대안이 될 수 있는가?

2. 제안 알고리즘의 구성 요소(angle penalty, adaptive K, hull 보정, 2-opt 등)가 경로 품질에 얼마나 기여하는가?

3. 다양한 규모 및 특성의 TSP 인스턴스에서 제안 알고리즘이 확장성과 일관된 성능을 유지하는가?

5.2 실험 환경 및 설정
하드웨어: Intel Core i7 (12th Gen), 16GB RAM, Ubuntu 22.04, NVIDIA GeForce GTX 1650
Held-Karp 실행 제한: a280 dataset을 node 20개로 자른 a20 dataset 제작 후 사용 

5.3 평가 지표

Tour Length: 완성된 경로의 총 거리
Execution Time: 전체 알고리즘 소요 시간 (초)
정규화 길이비: TourLength / (최적해 또는 Greedy 기준)
개선률(%): (기준 - 비교) / 기준 × 100

5.4 데이터셋

a280 (TSPLIB): 크기 280, 정형 구조
xql662: 크기 662, 복잡한 회로 구조
kz9976: 크기 9976, 외곽 밀집
mona-lisa100K: 크기 100,000, 곡선형 경로 포함

제안 알고리즘에는 더불어 node가 불규칙적으로 퍼져있고 외곽쪽으로 떨어져있는 데이터셋인 
ei8246
ja9847
vm22775
도 사용함 

5.5 비교 대상 알고리즘

Greedy (NN): 최근접 점 순차 탐색
Insertion: 최소 삽입 비용 방식
MST Approx.: Prim + DFS 기반 2-근사
Held-Karp: DP 기반 최적 해법 (n ≤ 20)
Proposed (Full): 제안 알고리즘 전체 구성 포함
Ablation Variants: 제안 알고리즘 구성 요소 제거 실험

5.7 구현 기법 비교 실험

Angle penalty 함수 비교: exp(-cosSim), (angle - π/2)^2 등
Grid vs Full Search: 후보군 제한 탐색 vs 전체 노드 거리 비교
Static K vs Adaptive K: 밀도 무시 고정 K 실험

5.8 결과 분석 (작성 예정)

표 1: 알고리즘별 Tour Length 및 실행 시간 비교

표 2: Ablation 조합별 성능 변화

표 3: penalty 함수별 성능 비교

그래프: 시간 vs 경로 품질 트레이드오프

해석: 각 요소의 기여도 분석 및 실용성 평가



======================================================
5. 실험 (Experiments)

5.1 실험 목적

본 실험의 목적은 다음 세 가지 질문에 대한 해답을 찾는 데 있다:

1. 제안한 알고리즘이 기존의 휴리스틱(Greedy, Insertion, MST) 및 최적화 기반 해법(Held-Karp)과 비교하여 경로 품질 및 실행 시간 면에서 실용적인 대안이 될 수 있는가?  
2. 제안 알고리즘에 포함된 구성 요소들(angle penalty, adaptive K, hull 보정, 2-opt, multi-start)이 성능 향상에 실질적으로 기여하는가?  
3. 다양한 규모 및 구조를 가진 TSP 인스턴스에서 일관된 성능과 확장성을 유지할 수 있는가?

5.2 실험 환경 및 설정

- CPU: Intel Core i7 (12th Gen)  
- RAM: 16GB  
- OS: Ubuntu 22.04  
- GPU: GTX 1650  
- 구현 언어: C++17  
- Held-Karp: 계산 복잡도로 인해 a280에서 20개 노드를 추출한 a20으로 대체 비교

5.3 비교 대상 알고리즘

| 이름                        | 설명                             |
| ------------------------- | ------------------------------ |
| Greedy (Nearest Neighbor) | 현재 위치에서 가장 가까운 점으로 이동          |
| Insertion                 | 삽입 비용이 가장 적은 위치에 새로운 점 삽입      |
| MST Approx.               | Prim 기반 MST → DFS 순회 (2-근사 해법) |
| Held-Karp                 | DP 기반 최적 해법 (n ≤ 20에서만 실행)     |
| Proposed (Full)           | 제안 알고리즘 전체 구성 포함               |
| Ablation Variants         | 구성 요소 제거 또는 단독 적용 실험           |


5.4 데이터셋

| 이름            | 크기      | 특징                    |
| ------------- | ------- | --------------------- |
| a280          | 280     | 정형 구조, TSPLIB 표준 인스턴스 |
| xql662        | 662     | 복잡한 회로 배선 구조          |
| kz9976        | 9,976   | 외곽 밀집, 중심 희박          |
| mona-lisa100K | 100,000 | 곡선 형태 경로 포함, 대규모      |
| ei8246        | 8,246   | 외곽 분산, 불균일 밀도         |
| ja9847        | 9,847   | 불규칙 퍼짐, 밀도 편향 존재      |
| vm22775       | 22,775  | 고해상도 추상 구조            |
| a20           | 20      | a280에서 20개 무작위 추출     |


5.5 평가 지표
알고리즘의 성능은 다음의 네 가지 기준을 중심으로 비교 분석하였다:

1. 총 경로 거리 (Tour Length): 방문 경로의 전체 길이. 값이 작을수록 경로 품질이 우수함.
2. 실행 시간 (Execution Time): 알고리즘이 하나의 인스턴스를 푸는 데 소요된 시간(ms 단위).
3. 개선률 (Improvement Rate): Greedy NN을 기준으로, 제안 알고리즘의 상대적 개선 정도를 정량화.
4. 경로 시각화 (Path Visualization): 지그재그와 급격한 각도 변화가 얼마나 줄었는지를 정성적으로 평가.

특히 4번 지표의 경우, 사람의 시각적 인지 측면에서 경로의 부드러움과 일관성을 평가하기 위해 각 알고리즘의 경로를 matplotlib으로 시각화하여 비교하였다.

5.6 성능 비교 실험

- 알고리즘별 경로 길이 및 실행 시간 결과를 표 형태로 비교
- 각 데이터셋에 대해 제안 알고리즘이 얼마나 개선되었는지 수치화
- 시각화(그래프 등)를 통해 비교 결과를 보완할 수 있음

5.7 Ablation Study

본 절에서는 제안한 HHI 기반 TSP 휴리스틱 알고리즘의 구성 요소별 성능 기여를 분석하고, 각 요소의 개별적/상호작용 효과를 실험적으로 고찰하였다. 실험은 기본 Greedy 구조에서 시작하여, 다음과 같은 요소들을 하나씩 추가하면서 수행하였다:

Adaptive Neighbor Size (AdapK)

2-opt Post-Optimization

Angle Penalty 함수 (람다 기반)

9-Cell Local Density Estimation

Convex Hull 기반 외곽 노드 보정

Multi-start Search Strategy

각 실험은 동일한 TSP 데이터셋에 대해 다양한 λ 값을 적용하고, 최단 경로를 생성한 설정만 비교 지표로 사용하였다. 이때 측정 지표는 투어 길이, 정확도 (GT 대비 %), 걸린 시간(ms), 메모리 사용량(KB), 최적 람다 값이다.








5.8 결과 분석 및 논의

- 제안 알고리즘이 기존 알고리즘보다 평균적으로 더 짧은 경로를 생성하고 실행 시간도 현실적 수준 유지
- 구성 요소가 결합되었을 때 가장 우수한 성능을 발휘하며, 단독 제거 시 품질 저하가 관측됨
- 외곽 노드 분포가 강한 데이터셋에서도 일관된 품질 유지
- 시각화된 경로에서도 지그재그 현상 감소 확인됨

